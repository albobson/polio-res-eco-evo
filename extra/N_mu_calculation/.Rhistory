legend.key.width = unit(0, 'cm'),
legend.key.height = unit(0, "cm"),
legend.key.size = unit(0.0, "cm"),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.2),  # Fills legend background & adds a border
legend.box.background = element_rect(color = "black", linewidth = 0),  # Adds an outer border
legend.margin = margin(1, 1, 1, 2),
)
suppressWarnings(dir.create(paste0(filepath, "res/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/sfig6")))
ggsave(paste0(filepath, "res/sup/sfig6/A.png"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.pdf"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.svg"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200, device = 'svg')
saveRDS(splot, file = paste0(filepath, "res/sup/sfig6/A.rds"))
splot <- ggplot(low_freq_clean, aes(x = init_moi_tot, y = delta_p, color = factor(weakness))) +
geom_line(linewidth = 0.7) +
scale_x_continuous(trans="log10", breaks=10^(-2:3),
labels = sapply(c(-2:3),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-2.1), 10^(2.6))) +
scale_y_continuous(trans="log10",
breaks=10^(-4:0),
labels = sapply(c(-4:0),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-4), 10^(0))
) +
scale_color_manual(name = "x Weaker",
values = gray_range) +
# ylim(0, round(max(low_freq_clean$delta_p), 1)) +
# xlim(0, 102) +
# theme_minimal() +
## This adds the points to the plot
# geom_point(data = df_points_clean,
#            mapping = aes(x = init_moi_tot,
#                          y = delta_p,
#                          color = factor(round(init_moi_tot, 2))),
#            size = 5) +
# scale_color_manual(values = c("#64A61C", "#FFA61C"),
#                    name = "Total MOI") +
xlab("Total MOI") +
ylab(expression(Delta * " f(Res.)")) +# paste0("\U0394 Freq. Resistance")) +
theme(
## Text size
text = element_text(size= axis_text_size),
axis.text = element_text(size= axis_text_size),
## Text color
axis.text.x = element_text(colour="black"),
axis.text.y = element_text(colour="black"),
axis.title.y = element_text(),
axis.title.x = element_text(),
## Changing the lines in the plot
panel.grid.major.x = element_line(color = "lightgrey"), ## Major x lines
panel.grid.minor.x = element_blank(),                   ## Minor x lines
panel.grid.major.y = element_line(color = "lightgrey"), ## Major y lines
panel.grid.minor.y = element_blank(), ## Minor y lines
## For faceted plots: The strip is the top of the facet
strip.background = element_blank(),
strip.text.x = element_blank(),
## Remove the background of the plot and panel
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
## Legend stuff
# legend.position = "none",
legend.position = "inside",
# legend.position.inside = c(0.35, 0.94), ## Upper left
legend.position.inside = c(0.839, 0.83), ## bottom right
legend.text = element_text(size = legend_text_size),
# legend.title = element_blank(),
# legend.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent"),
legend.key.width = unit(0, 'cm'),
legend.key.height = unit(0, "cm"),
legend.key.size = unit(0.0, "cm"),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.2),  # Fills legend background & adds a border
legend.box.background = element_rect(color = "black", linewidth = 0),  # Adds an outer border
legend.margin = margin(1, 1, 1, 2),
)
suppressWarnings(dir.create(paste0(filepath, "res/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/sfig6")))
ggsave(paste0(filepath, "res/sup/sfig6/A.png"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.pdf"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.svg"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200, device = 'svg')
saveRDS(splot, file = paste0(filepath, "res/sup/sfig6/A.rds"))
splot <- ggplot(low_freq_clean, aes(x = init_moi_tot, y = delta_p, color = factor(weakness))) +
geom_line(linewidth = 0.7) +
scale_x_continuous(trans="log10", breaks=10^(-2:3),
labels = sapply(c(-2:3),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-2.1), 10^(2.6))) +
scale_y_continuous(trans="log10",
breaks=10^(-4:0),
labels = sapply(c(-4:0),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-4), 10^(0))
) +
scale_color_manual(name = "x-Weaker",
values = gray_range) +
# ylim(0, round(max(low_freq_clean$delta_p), 1)) +
# xlim(0, 102) +
# theme_minimal() +
## This adds the points to the plot
# geom_point(data = df_points_clean,
#            mapping = aes(x = init_moi_tot,
#                          y = delta_p,
#                          color = factor(round(init_moi_tot, 2))),
#            size = 5) +
# scale_color_manual(values = c("#64A61C", "#FFA61C"),
#                    name = "Total MOI") +
xlab("Total MOI") +
ylab(expression(Delta * " f(Res.)")) +# paste0("\U0394 Freq. Resistance")) +
theme(
## Text size
text = element_text(size= axis_text_size),
axis.text = element_text(size= axis_text_size),
## Text color
axis.text.x = element_text(colour="black"),
axis.text.y = element_text(colour="black"),
axis.title.y = element_text(),
axis.title.x = element_text(),
## Changing the lines in the plot
panel.grid.major.x = element_line(color = "lightgrey"), ## Major x lines
panel.grid.minor.x = element_blank(),                   ## Minor x lines
panel.grid.major.y = element_line(color = "lightgrey"), ## Major y lines
panel.grid.minor.y = element_blank(), ## Minor y lines
## For faceted plots: The strip is the top of the facet
strip.background = element_blank(),
strip.text.x = element_blank(),
## Remove the background of the plot and panel
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
## Legend stuff
# legend.position = "none",
legend.position = "inside",
# legend.position.inside = c(0.35, 0.94), ## Upper left
legend.position.inside = c(0.839, 0.83), ## bottom right
legend.text = element_text(size = legend_text_size),
# legend.title = element_blank(),
# legend.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent"),
legend.key.width = unit(0, 'cm'),
legend.key.height = unit(0, "cm"),
legend.key.size = unit(0.0, "cm"),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.2),  # Fills legend background & adds a border
legend.box.background = element_rect(color = "black", linewidth = 0),  # Adds an outer border
legend.margin = margin(1, 1, 1, 2),
)
suppressWarnings(dir.create(paste0(filepath, "res/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/sfig6")))
ggsave(paste0(filepath, "res/sup/sfig6/A.png"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.pdf"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.svg"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200, device = 'svg')
saveRDS(splot, file = paste0(filepath, "res/sup/sfig6/A.rds"))
splot <- ggplot(low_freq_clean, aes(x = init_moi_tot, y = delta_p, color = factor(weakness))) +
geom_line(linewidth = 0.7) +
scale_x_continuous(trans="log10", breaks=10^(-2:3),
labels = sapply(c(-2:3),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-2.1), 10^(2.6))) +
scale_y_continuous(trans="log10",
breaks=10^(-4:0),
labels = sapply(c(-4:0),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-4), 10^(0))
) +
scale_color_manual(name = "x-Weaker",
values = gray_range) +
# ylim(0, round(max(low_freq_clean$delta_p), 1)) +
# xlim(0, 102) +
# theme_minimal() +
## This adds the points to the plot
# geom_point(data = df_points_clean,
#            mapping = aes(x = init_moi_tot,
#                          y = delta_p,
#                          color = factor(round(init_moi_tot, 2))),
#            size = 5) +
# scale_color_manual(values = c("#64A61C", "#FFA61C"),
#                    name = "Total MOI") +
xlab("Total MOI") +
ylab(expression(Delta * " f(Res.)")) +# paste0("\U0394 Freq. Resistance")) +
theme(
## Text size
text = element_text(size= axis_text_size),
axis.text = element_text(size= axis_text_size),
## Text color
axis.text.x = element_text(colour="black"),
axis.text.y = element_text(colour="black"),
axis.title.y = element_text(),
axis.title.x = element_text(),
## Changing the lines in the plot
panel.grid.major.x = element_line(color = "lightgrey"), ## Major x lines
panel.grid.minor.x = element_blank(),                   ## Minor x lines
panel.grid.major.y = element_line(color = "lightgrey"), ## Major y lines
panel.grid.minor.y = element_blank(), ## Minor y lines
## For faceted plots: The strip is the top of the facet
strip.background = element_blank(),
strip.text.x = element_blank(),
## Remove the background of the plot and panel
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
## Legend stuff
# legend.position = "none",
legend.position = "inside",
# legend.position.inside = c(0.35, 0.94), ## Upper left
legend.position.inside = c(0.833, 0.83), ## bottom right
legend.text = element_text(size = legend_text_size),
# legend.title = element_blank(),
# legend.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent"),
legend.key.width = unit(0, 'cm'),
legend.key.height = unit(0, "cm"),
legend.key.size = unit(0.0, "cm"),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.2),  # Fills legend background & adds a border
legend.box.background = element_rect(color = "black", linewidth = 0),  # Adds an outer border
legend.margin = margin(1, 1, 1, 2),
)
suppressWarnings(dir.create(paste0(filepath, "res/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/sfig6")))
ggsave(paste0(filepath, "res/sup/sfig6/A.png"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.pdf"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.svg"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200, device = 'svg')
saveRDS(splot, file = paste0(filepath, "res/sup/sfig6/A.rds"))
splot <- ggplot(low_freq_clean, aes(x = init_moi_tot, y = delta_p, color = factor(weakness))) +
geom_line(linewidth = 0.7) +
scale_x_continuous(trans="log10", breaks=10^(-2:3),
labels = sapply(c(-2:3),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-2.1), 10^(2.6))) +
scale_y_continuous(trans="log10",
breaks=10^(-4:0),
labels = sapply(c(-4:0),function(i){parse(text = sprintf("10^%d",i))}),
limits = c(10^(-4), 10^(0))
) +
scale_color_manual(name = "x-Weaker",
values = gray_range) +
# ylim(0, round(max(low_freq_clean$delta_p), 1)) +
# xlim(0, 102) +
# theme_minimal() +
## This adds the points to the plot
# geom_point(data = df_points_clean,
#            mapping = aes(x = init_moi_tot,
#                          y = delta_p,
#                          color = factor(round(init_moi_tot, 2))),
#            size = 5) +
# scale_color_manual(values = c("#64A61C", "#FFA61C"),
#                    name = "Total MOI") +
xlab("Total MOI") +
ylab(expression(Delta * " f(Res.)")) +# paste0("\U0394 Freq. Resistance")) +
theme(
## Text size
text = element_text(size= axis_text_size),
axis.text = element_text(size= axis_text_size),
## Text color
axis.text.x = element_text(colour="black"),
axis.text.y = element_text(colour="black"),
axis.title.y = element_text(),
axis.title.x = element_text(),
## Changing the lines in the plot
panel.grid.major.x = element_line(color = "lightgrey"), ## Major x lines
panel.grid.minor.x = element_blank(),                   ## Minor x lines
panel.grid.major.y = element_line(color = "lightgrey"), ## Major y lines
panel.grid.minor.y = element_blank(), ## Minor y lines
## For faceted plots: The strip is the top of the facet
strip.background = element_blank(),
strip.text.x = element_blank(),
## Remove the background of the plot and panel
panel.background = element_rect(fill='transparent'),
plot.background = element_rect(fill='transparent', color=NA),
## Legend stuff
# legend.position = "none",
legend.position = "inside",
# legend.position.inside = c(0.35, 0.94), ## Upper left
legend.position.inside = c(0.828, 0.83), ## bottom right
legend.text = element_text(size = legend_text_size),
# legend.title = element_blank(),
# legend.background = element_rect(fill = "transparent"),
legend.key = element_rect(fill = "transparent"),
legend.key.width = unit(0, 'cm'),
legend.key.height = unit(0, "cm"),
legend.key.size = unit(0.0, "cm"),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.2),  # Fills legend background & adds a border
legend.box.background = element_rect(color = "black", linewidth = 0),  # Adds an outer border
legend.margin = margin(1, 1, 1, 2),
)
suppressWarnings(dir.create(paste0(filepath, "res/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/")))
suppressWarnings(dir.create(paste0(filepath, "res/sup/sfig6")))
ggsave(paste0(filepath, "res/sup/sfig6/A.png"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.pdf"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200)
ggsave(paste0(filepath, "res/sup/sfig6/A.svg"), splot, h = height, w = width/3, units = "cm", bg = "transparent", dpi = 1200, device = 'svg')
saveRDS(splot, file = paste0(filepath, "res/sup/sfig6/A.rds"))
#### Set up                                                                 ####
## Libraries
require(dplyr)
require(ggplot2)
require(cowplot)
require(tidyr)
## Set up where to save
## Date of the run
init_date <- as.character(snakemake@params[["date"]])
dim = unlist(list(11, 4.5))
width = dim[1]
height = dim[2]
## Create the filepath where things will be saved
filepath <- paste0("runs/ddt_", init_fit_func, "_mu_", init_mu, "_", init_date, "/")
## Grab the .rds files
## Create the filepath where things will be saved
rds_files <- list.files(path = paste0(filepath, "res/sup/sfig6"), pattern = "\\.rds$",
recursive = TRUE, full.names = TRUE)
plot_list <- lapply(rds_files, readRDS)
#### Plotting together                                                      ####
## Rebuilding figure 6A
sfig6a <- plot_list[[1]]
## Rebuilding figure 6B
sfig6b <- plot_list[[2]]
## Rebuilding figure 6C
sfig6c <- plot_list[[3]]
## Creating the first row
sfig6 <- plot_grid(sfig6a, sfig6b, sfig6c,
ncol = 3, axis = "l", align = "v")
save_plot(paste0(filepath, "res/sup/sfig6/sfig6.png"), sfig6, base_height = height, base_width = width, unit = "cm", bg = "transparent", dpi = 1200)
save_plot(paste0(filepath, "res/sup/sfig6/sfig6.pdf"), sfig6, base_height = height, base_width = width, unit = "cm", bg = "transparent", dpi = 1200)
## Create the filepath where things will be saved
filepath <- paste0("runs/ddt_", init_fit_func, "_mu_", init_mu, "_", init_date, "/")
## Recursively list .rds files under /res/
pdf_files <- list.files(
path = paste0(filepath, "res/sup/"),
pattern = "^sfig[0-9]\\.pdf$",
full.names = TRUE,
recursive = TRUE
)
pdf_combine(input = pdf_files, output = paste0(filepath, "res/all_sfigs.pdf"))
## Libraries to load
require(dplyr)
require(ggplot2)
require(qpdf)
## Create the filepath where things will be saved
filepath <- paste0("runs/ddt_", init_fit_func, "_mu_", init_mu, "_", init_date, "/")
## Recursively list .rds files under /res/
pdf_files <- list.files(
path = paste0(filepath, "res/sup/"),
pattern = "^sfig[0-9]\\.pdf$",
full.names = TRUE,
recursive = TRUE
)
pdf_combine(input = pdf_files, output = paste0(filepath, "res/all_sfigs.pdf"))
init_date
93-71
length(71:93)
length(1:70)
script:
reticulate::repl_python()
2e-5
2e-5*3e6
2e-5*3e5
2e-5*3e3
2e-5*3e2
n_u = 2
n_u = 0.01
## Create the filepath where things will be saved
filepath <- paste0("../../pipeline/runs/ddt_logistic_mu_2e-5_2025-05-09/")
## geom_text() is in terms of mm, where element_text() is in terms of pt. I want
## my geom_text and axis text to be the same. Here, I am defining a conversion
## which will keep the text sizes the same between text types.
geom_text_conv = 0.3528
## Read in fitness function and parameters
fit_func <- read.csv(paste0("../../pipeline/runs/ddt_logistic_mu_2e-05_2025-05-09/dat_gen/params/logistic_fitness_function.csv"))
getwd()
setwd("../book")
setwd("250512_Ne/")
## Read in fitness function and parameters
fit_func <- read.csv(paste0("../../pipeline/runs/ddt_logistic_mu_2e-05_2025-05-09/dat_gen/params/logistic_fitness_function.csv"))
optim_params <- read.csv(paste0("../../pipeline/runs/ddt_logistic_mu_2e-05_2025-05-09/dat_gen/params/optim_params.csv"))
## Source functions to run simulations
source("../../pipeline/scr/polv_DDT_functions.R")  ## Main functions
source("../../pipeline/scr/optimizations/model_optimization_funcs.R")  ## Optimization functions
## From the n_u, find the initial parameters to use
moi_res <- 0
moi_sus <- 10 ## MOI at 10 so that nearly every cell is infected
mut_rate <- 2e-5
cells <- n_u/mut_rate
#### Run sims ####
sim_stochv2 <- determ_polv(n = gens,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = mut_rate,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv
)
gens = 5
iter = 1
#### Run sims ####
sim_stochv2 <- determ_polv(n = gens,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = mut_rate,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv
)
cells
#### Run sims ####
sim_stochv2 <- determ_polv(n = gens,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv
)
moi_res
moi_sus
fit_func_in
fit_func$prob_surv
#### Run sims ####
sim_stochv2 <- stoch_polv(n = gens,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv
)
#### Run sims ####
sim_stochv2 <- stoch_polv(n = gens,
imm_delay = gens + 1,
t_pocap = 0,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv
)
#### Run sims ####
sim_stochv2 <- stoch_polv(n = gens,
imm_delay = gens + 1,
t_pocap = 0,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv,
id = iter
)
warnings()
bg_mutat
mut_rate
#### Run sims ####
sim_stochv2 <- stoch_polv(n = gens,
imm_delay = gens + 1,
t_pocap = 0,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = 1/mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv,
id = iter
)
#### Run sims ####
sim_stochv2 <- stoch_polv(n = gens,
imm_delay = gens + 1,
t_pocap = 0,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = 1/mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv,
id = iter
)
#### Run sims ####
sim_stochv2 <- stoch_polv(n = gens,
imm_delay = gens + 1,
t_pocap = 0,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = 1/mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv,
id = iter
)
#### Run sims ####
sim_stochv2 <- stoch_polv(n = gens,
imm_delay = gens + 1,
t_pocap = 0,
c_pop = cells,
moi_mut_start = moi_res,
moi_wt_start = moi_sus,
bg_mutat = 1/mut_rate,
max_vpc = optim_params$optim_max_vpc,
v_prog = optim_params$optim_v_prog,
p2pfu = optim_params$optim_p2pfu,
fit_func_in = fit_func$prob_surv,
id = iter
)
reticulate::repl_python()
